# Алгоритмы для новичков. Расстояние Левенштейна.
'''Расстояние Левенштейна позволяет определить на сколько близки друг к другу две строки.
Расстояние Левенштейна так же называю редакционным расоянием, оно показывает сколько
действий по редактированию одной строки нужно выполнить, чтобы привести её к виду
второй стоки. Таких действий может быть всего ТРИ:
1)Добавление символа;
2)Удаление символа;
3)Замена символа.
'''
str1 = "Привет"
str2 = "Привт"

def dist(a, b):
    def rec(i, j):
        if i == 0 or j == 0: # если строка пустая, то расстояние равняется её длине (n вставок)
            return max(i, j)

        elif a[i-1] == b[j-1]: # если последние символы одинаковые, то просто съедаем их
            return rec(i-1, j-1 )

        else: # иначе считаем минимальный вариант
            return 1 + min(
                rec(i, j-1), # удаление символа
                rec(i-1, j), # вставка символа
                rec(i-1, j-1), # замена символа
                )
    return rec(len(a), len(b))

lev = dist(str1, str2)
bigger = max([len(str1), len(str2)])
ptc = round(((bigger - lev)/bigger)*100, 3) # округление до 3 знаков после запятой

print("Расстояние Левенштейна равно:  " + str(lev))
print(
    "Строка #1 : {str1}\nСтрока #2 : {str2}\n-------------------------------\nСхожесть : {ptc} %".format(
        str1=str1, str2=str2, ptc=ptc))

input()
