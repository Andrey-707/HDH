# Telegram_Echo_Bot

# –ò–º—è –±–æ—Ç–∞: Echo_Bot
# –ù–∏–∫–Ω–µ–π–º –±–æ—Ç–∞: @Tetresh_bot
import telebot
import pyowm

from pyowm.owm import OWM
from pyowm.utils.config import get_default_config
from config import TOKEN, API, city
from random import randint
from telebot import types


bot = telebot.TeleBot(TOKEN)

@bot.message_handler(commands=["start"])
def welcome(message):
    # sticker
    sti = open("AnimatedSticker.tgs", "rb")
    bot.send_sticker(message.chat.id, sti)

    # keyboard
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("üé≤ Rand Int 0-100")
    item2 = types.KeyboardButton("üòä –ö–∞–∫ –¥–µ–ª–∞?")
    markup.add(item1, item2)

    # message
    bot.send_message(message.chat.id,
        "Welcome, {0.first_name}!\n–ú–æ—ë –∏–º—è - <b>{1.first_name}</b>.\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø–æ–≥–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –ø–æ–≥–æ–¥–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.".format(
        message.from_user, bot.get_me()), parse_mode="html", reply_markup=markup)


@bot.message_handler(content_types=["text"])
def send_messege(message):
    if message.chat.type == "private":
        if message.text == "üé≤ Rand Int 0-100":
            bot.send_message(message.chat.id, str(randint(0,100)))
        elif message.text == "üòä –ö–∞–∫ –¥–µ–ª–∞?":

            markup = types.InlineKeyboardMarkup(row_width=2)
            item1 = types.InlineKeyboardButton("–•–æ—Ä–æ—à–æ", callback_data="good")
            item2 = types.InlineKeyboardButton("–ù–µ –æ—á–µ–Ω—å", callback_data="bad")

            markup.add(item1, item2)

            bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ, –∞ —É —Ç–µ–±—è?", reply_markup=markup)
        elif message.text == "–ü–æ–≥–æ–¥–∞" or message.text == "–ø–æ–≥–æ–¥–∞":
            config_dict = get_default_config()
            config_dict["language"] = "ru"
            owm = OWM(API, config_dict)

            owm.supported_languages
            mgr = owm.weather_manager()

            observation = mgr.weather_at_place(city)
            # observation = mgr.weather_at_place(message.text)

            # –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –ø–æ–≥–æ–¥–µ
            w = observation.weather
            DS = w.detailed_status                   # 'clouds'
            wind = w.wind()["speed"]                 # {'speed': 4.6, 'deg': 330}
            humidity = w.humidity                    # 87
            temp = w.temperature("celsius")["temp"]  # {'temp_max': 10.5, 'temp': 9.7, 'temp_min': 9.0}
            rain = w.rain                            # {}
            HI = w.heat_index                        # None
            clouds = w.clouds                        # 75

            # answer = "–í –≥–æ—Ä–æ–¥–µ " + message.text + " —Å–µ–π—á–∞—Å " + DS + "\n"
            answer = "–í –≥–æ—Ä–æ–¥–µ " + city + " —Å–µ–π—á–∞—Å " + DS + "\n"
            answer += "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ " + str(temp) + " C" + "\n"
            answer += "–í–µ—Ç–µ—Ä " + str(wind) + " –º/—Å" + "\n"
            answer += "–í–ª–∞–∂–Ω–æ—Å—Ç—å " + str(humidity) + " %" + "\n"
            answer += "–û—Å–∞–¥–∫–∏ " + str(rain) + "\n"
            answer += "–û–±–ª–∞—á–Ω–æ—Å—å " + str(clouds) + " %" + "\n\n"

            # –ê–Ω–∞–ª–∏–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
            if temp < -4:
                answer += ("–°–µ–π—á–∞—Å –Ω–∞ —É–ª–∏—Ü–µ –º–æ—Ä–æ–∑–Ω–æ.")
            elif temp < 0 and temp >= -4:
                answer += ("–°–µ–π—á–∞—Å –Ω–∞ —É–ª–∏—Ü–µ —Ö–æ–ª–æ–¥–Ω–æ.")
            elif temp >= 0 and temp < 12:
                answer += ("–°–µ–π—á–∞—Å –Ω–∞ —É–ª–∏—Ü–µ –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ.")
            elif temp >= 12 and temp < 27:  
                answer += ("–°–µ–π—á–∞—Å –Ω–∞ —É–ª–∏—Ü–µ —Ç–µ–ø–ª–æ.")
            else: # t > 27
                answer += ("–°–µ–π—á–∞—Å –Ω–∞ —É–ª–∏—Ü–µ –∂–∞—Ä–∫–æ.")

            bot.send_message(message.chat.id, answer)           
        else:
            bot.send_message(message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–∏ —á–µ–º –Ω–µ –º–æ–≥—É –ø–æ–º–æ—á üò¢")


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            if call.data == "good":
                bot.send_message(call.message.chat.id, "–í–æ—Ç –∏ –æ—Ç–ª–∏—á–Ω–æ üòä")
            elif call.data == "bad":
                bot.send_message(call.message.chat.id, "–í—Å–µ –Ω–∞–ª–∞–¥–∏—Ç—Å—è üò¢")

            # remove inline buttons
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="üòä –ö–∞–∫ –¥–µ–ª–∞?",
                reply_markup=None)

            # show alert (show_alert=True to enable)
            bot.answer_callback_query(callback_query_id=call.id, show_alert=False,
                text="–≠–¢–û –¢–ï–°–¢–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï!")

    except Exception as e:
        print(repr(e))


print("Program start")

# run bot
bot.polling(none_stop=True)

print("Program finish")
